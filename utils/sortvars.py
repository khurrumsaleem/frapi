#!/usr/bin/python
import re
import sys, os

data="""
    ! EOSTemp(j)            = EOS Temperature at calculation node j
    ! EOSRad(i,j)           = radius to node j at time t
    ! RadialBound           = cold state radius to node j (reference for strains)
    ! sigmah                = cladding hoop stress
    ! sigmaz                = cladding axial stress
    ! CldPermAxStrn         = permanent hoop strain in cladding
    ! CldPermHoopStrn       = permanent axial strain in clad
    ! Ih                    = rod-to-coolant heat transfer mode
    ! n1                    = Dimension of radial node vectors
    ! n2                    = Dimension of axial node vectors. 1 = implied dimension for no. of fuel rods
    ! nmesh                 = number of nodes in mesh - to outer surface of clad
    ! ncladi                = number of nodes to gas gap / clad boundary
    ! igpnod                = node number at surface of fuel pellet stack
    ! modfd                 = deformation model indicator
    ! naxn                  = number of axial nodes
    ! IterationCount        = iteration count
    ! RuptFailIndex         = rupture indicator ( 1 --# yes )
    ! CladCollapseIndex     = buckled clad indicator ( 1 --# yes )
    ! unit                  = .TRUE. --# i/o in british units, .FALSE. --# s.i.
    ! t                     = current time
    ! GasPress              = gap pressure (psia)
    ! AxialPowr             = local fuel rod power   (kW/ftom)
    ! delth                 = fuel pellet stack axial displacement
    ! dcldh                 = cladding axial displacement
    ! HeatFlux              = surface heat flux (btu/sec-ftom**2)
    ! AxNodElevat           = axial position
    ! CritHtFlux            = critical heat flux (btu/sec-ftom**2)
    ! powave                = average fuel rod power (kW/ftom)
    ! CoolPress             = pressure in coolant channel (psia)
    ! flwblk                = percent flow blockage, If ruptured
    ! ruptem                = temperature (F) at rupture
    ! tp                    = temperature of plenum gas (F)
    ! flowg                 = rate of flow of gas from plenum (gm-moles/sec)
    ! FilmCoeffAv           = heat transfer coeficient at rod surface (btu/hr-ftom**2-F)
    ! HGapAv                = heat transfer coeficient across gas gap (btu/hr-ftom**2-F)
    ! EOSOxideThick         = depth of metal-water reaction on cladding (inches)
    ! WatrMetlEnrgy         = energy generated by metal-water reaction on cladding surface (kW/ftom)
    ! AxialNodLen(n)        = length associated with axial node n (ftom)
    ! CldPermStrn(k)        = cladding permanent radial strain
    ! EnrgyMeltZ(ll,k)      = energy absorbed in melting by l-th half mesh (two half meshes per radial node) (btu/ftom**3)
    ! qmaxmelt(ll)          = maximum energy half mesh ll can absorb in melting (btu/ftom**3)
    ! n3                    = total number of half meshes = 2*n1
    ! bup                   = fuel burnup (mwd/mtu)
    ! frpo2                 = fraction of fuel by weight that is plutonium
    ! tmelt(1)              = melt temperature of fuel (F)
    ! RInterfacGap(k)       = gap thickness at pellet interfaces (ftom)
    ! RInterfacPrs(k)       = interface pressure between fuel and cladding, psi
    ! rbmax                 = cladding radial displacement at peak ballooning point,in.
    ! CladEffStress(k)      = cladding effective stress (psi)
    ! modfal(jrod)          = mode of cladding failure. see sub. fala for detai
    ! TotalVoidVol          = total fuel rod void volume (ftom**3)
    ! EffStrain(k)          = effective plastic strain at axial node k,cladding
    ! EinstabilStrain(k)    = instability strain of cladding, axial node k
    ! StressAtInstStrain(k) = stress at instability strain, psi
    ! CladYieldStress(k)    = work-hardened yield stress, psi
    ! chstrs = maximum hoop stress in balloon region (psi)
    ! frbal  = balon2 circular/radial model switch
    ! pmxbal = balon2 maximum gap pressure (Pa)
    ! r8bal  = balon2 average radius at balon2 axial node 8 (m)
    ! tcebal = maximum circumferential strain in balloon region
    ! ifbaln = 1 If balon2 predicts failure
    ! jmnbal = balon2 radial contact node
    ! kntbal = 1 If balon2 predicts pellet-clad contact
    ! nbncal = 1 If balon2 has been called once
    ! pdrato = bundle pitch to rod diameter ratio
    ! rnbnt  = ratio of balloonable cells to total cells
    ! totnb  = total number of cells in a bundle
    ! nodprm = number flow area reduction subnodes
    ! farbal = flow area reduction   (m**2/m**2)
    ! sdfar  = standard deviation of flow area reduction
    ! zfarbl = axial location flow area reduction subnodes  (m)
"""

vars = [a.split()[1].split('(')[0].strip().lower() for a in data.split('\n')[1:-1]]
comments = {a.split()[1].split('(')[0].strip().lower(): a.split('=')[1].strip().lower() for a in data.split('\n')[1:-1]}


with open('../fraptran/include/ft_pointers_h.f90','r') as f:
    lib = [a.split('::') for a in f.read().split('\n')]
    lib = {b[1].strip().lower(): b[0] for b in lib}

unknowns = filter(lambda x: not x in lib, vars)
knowns = filter(lambda x: x in lib, vars)

slib = {}
for v in knowns:
    key = lib[v]
    if not key in slib: slib[key] = []
    slib[key].append(v)

c_0  = ('c_0',  lambda a: (not 'dimension'      in a) and ('character' in a), lambda b: "case('%s')\n    var = this %% dftran %% %s" % (b, b))
b_0  = ('b_0',  lambda a: (not 'dimension'      in a) and ('logical'   in a), lambda b: "case('%s')\n    var = this %% dftran %% %s" % (b, b))
i4_0 = ('i4_0', lambda a: (not 'dimension'      in a) and ('integer'   in a), lambda b: "case('%s')\n    var = this %% dftran %% %s" % (b, b))
i4_1 = ('i4_1', lambda a: (    'dimension(:)'   in a) and ('integer'   in a), lambda b: "case('%s')\n    var(:) = this %% dftran %% %s (:)" % (b, b))
i4_2 = ('i4_2', lambda a: (    'dimension(:,:)' in a) and ('integer'   in a), lambda b: "case('%s')\n    var(:,:) = this %% dftran %% %s (:,:)" % (b, b))
r8_0 = ('r8_0', lambda a: (not 'dimension'      in a) and ('real'      in a), lambda b: "case('%s')\n    var = this %% dftran %% %s" % (b, b))
r8_1 = ('r8_1', lambda a: (    'dimension(:)'   in a) and ('real'      in a), lambda b: "case('%s')\n    var(:) = this %% dftran %% %s (:)" % (b, b))
r8_2 = ('r8_2', lambda a: (    'dimension(:,:)' in a) and ('real'      in a), lambda b: "case('%s')\n    var(:,:) = this %% dftran %% %s (:,:)" % (b, b))

tps = [i4_0, i4_1, i4_2, r8_0, r8_1, r8_2]

i = 0
for tp in tps:
    for a in slib:
        s, f, g = tp
        if f(a):
            for b in slib[a]:
                i += 1
                #print "varname(%i) = '%s'" % (i,b)
                #print "vartype(%i) = '%s'" % (i,s)
                print "varcomment(%i) = '%s'" % (i,comments[b])

print unknowns









